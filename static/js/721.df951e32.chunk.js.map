{"version":3,"file":"static/js/721.df951e32.chunk.js","mappings":"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","sources":["components/ContactsList/ContactsList.styled.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/spinner/src/spinner.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","components/Form/Form.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const List = styled.ul`\n  width: 500px;\n\n  margin-left: 214px;\n`;\n\nexport const Button = styled.button`\n  border: 1px solid;\n  color: rgb(63, 94, 251);\n  border-radius: 4px;\n  font-weight: 500;\n  background: radial-gradient(\n    circle,\n    rgba(238, 174, 202, 1) 0%,\n    rgba(148, 187, 233, 1) 100%\n  );\n  cursor: pointer;\n  transition: 0.4s;\n  color: #f0eaea;\n  &:hover {\n    background: radial-gradient(\n      circle,\n      rgba(63, 94, 251, 1) 0%,\n      rgba(252, 70, 107, 1) 100%\n    );\n  }\n`;\n\nexport const Loading = styled.div`\n  margin: 0;\n  top: 553px;\n  left: 540px;\n  color: red;\n  font-size: 25px;\n`;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactsThunk } from '../../redux/contactsSlice/operations';\nimport { Button, Item, List, Loading } from './ContactsList.styled';\nimport { Text } from '@chakra-ui/react';\n\nexport const ContactsList = () => {\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const contacts = useSelector(state => state.contacts.items);\n\n  const filterContact = useSelector(state => state.filters.filter);\n\n  const dispatch = useDispatch();\n\n  const delContact = id => {\n    dispatch(deleteContactsThunk(id));\n  };\n\n  const getFilterContact = () => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filterContact)\n    );\n  };\n\n  const visible = getFilterContact();\n\n  return (\n    <>\n      <Loading>{isLoading && <p>Loading...</p>}</Loading>\n\n      <List>\n        {visible.map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              <Text fontSize={'30px'} color={'#041607'} fontWeight={'600'}>\n                {name}: {number}\n              </Text>\n\n              <Button type=\"button\" onClick={() => delContact(id)}>\n                delete\n              </Button>\n            </Item>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Filter_text__uqQRu\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { filterContacts } from '../../redux/filterSlice/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <>\n      <p className={css.text}>Find contacts by name</p>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterChange}\n      />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__WzsIr\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Form_container__WXj-7\",\"title\":\"Form_title__5gZHF\",\"input\":\"Form_input__FTtTw\",\"btnSubmit\":\"Form_btnSubmit__VzEYk\"};","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nconst spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\ninterface SpinnerOptions {\n  /**\n   * The color of the empty area in the spinner\n   * @default \"transparent\"\n   */\n  emptyColor?: string\n  /**\n   * The color of the spinner\n   */\n  color?: string\n  /**\n   * The thickness of the spinner\n   * @default \"2px\"\n   * @example\n   * ```jsx\n   * <Spinner thickness=\"4px\"/>\n   * ```\n   */\n  thickness?: string\n  /**\n   * The speed of the spinner.\n   * @default \"0.45s\"\n   * @example\n   * ```jsx\n   * <Spinner speed=\"0.2s\"/>\n   * ```\n   */\n  speed?: string\n  /**\n   * For accessibility, it is important to add a fallback loading text.\n   * This text will be visible to screen readers.\n   * @default \"Loading...\"\n   */\n  label?: string\n}\n\nexport interface SpinnerProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof SpinnerOptions>,\n    SpinnerOptions,\n    ThemingProps<\"Spinner\"> {}\n\n/**\n * Spinner is used to indicate the loading state of a page or a component,\n * It renders a `div` by default.\n *\n * @see Docs https://chakra-ui.com/spinner\n */\nexport const Spinner = forwardRef<SpinnerProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Spinner\", props)\n\n  const {\n    label = \"Loading...\",\n    thickness = \"2px\",\n    speed = \"0.45s\",\n    emptyColor = \"transparent\",\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-spinner\", className)\n\n  const spinnerStyles = {\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    animation: `${spin} ${speed} linear infinite`,\n    ...styles,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={spinnerStyles}\n      className={_className}\n      {...rest}\n    >\n      {label && <chakra.span srOnly>{label}</chakra.span>}\n    </chakra.div>\n  )\n})\n\nSpinner.displayName = \"Spinner\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './Form.module.css';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContactsThunk } from '../../redux/contactsSlice/operations';\nimport { Button, Input } from '@chakra-ui/react';\n\nexport const Form = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const formSubmit = e => {\n    e.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: e.target.name.value,\n      number: e.target.number.value,\n    };\n    if (\n      contacts.find(\n        ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n      )\n    ) {\n      alert('Oops!');\n      return;\n    }\n    dispatch(addContactsThunk(contact));\n    e.target.reset();\n  };\n\n  // const { name, number } = form;\n\n  return (\n    <div className={css.container}>\n      <form onSubmit={formSubmit}>\n        <label>\n          <h1 className={css.title}>Name</h1>\n          <Input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Oleksandr Korniichuk\"\n            required\n            id={nameInputId}\n          />\n          <h1 className={css.title}>Number</h1>\n          <Input\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"123-45-67\"\n            required\n            id={numberInputId}\n          />\n        </label>\n        <Button type=\"submit\" className={css.btnSubmit}>\n          Add contact\n        </Button>\n      </form>\n    </div>\n  );\n};\n","import { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContactsThunk } from '../../redux/contactsSlice/operations';\nimport css from './Contacts.module.css';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { Form } from 'components/Form/Form';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your Tasks</title>\n      </Helmet>\n      <div className={css.container}>\n        {isLoading && 'Request in progress...'}\n      </div>\n      <title>Phonebook</title>\n      <Form />\n      <title>Contacts</title>\n      <Filter />\n      <ContactsList />\n    </HelmetProvider>\n  );\n};\n\nexport default Contacts;\n"],"names":["Item","styled","_templateObject","_taggedTemplateLiteral","List","_templateObject2","Button","_templateObject3","Loading","_templateObject4","Text","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","chakra","p","cx","__css","displayName","ContactsList","isLoading","useSelector","state","contacts","items","filterContact","filters","filter","dispatch","useDispatch","visible","_ref","name","toLowerCase","includes","_jsxs","_Fragment","children","_jsx","map","_ref2","id","number","fontSize","color","fontWeight","type","onClick","deleteContactsThunk","delContact","Filter","css","onChange","e","filterContacts","target","value","createContext","strict","_createContext2","useButtonGroup","ButtonGroupProvider","ButtonIcon","_children","isValidElement","cloneElement","focusable","_className","span","display","alignSelf","flexShrink","spin","keyframes","transform","Spinner","_omitThemingProps$lab","label","_omitThemingProps$thi","thickness","_omitThemingProps$spe","speed","_omitThemingProps$emp","emptyColor","spinnerStyles","borderColor","borderStyle","borderRadius","borderWidth","borderBottomColor","borderLeftColor","animation","div","srOnly","ButtonSpinner","placement","_props$spacing","spacing","_props$children","width","height","marginProp","useMemo","alignItems","position","group","_omitThemingProps$isD","isDisabled","isActive","leftIcon","rightIcon","loadingText","_omitThemingProps$ico","iconSpacing","spinner","_omitThemingProps$spi","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useState","_useState2","isButton","setIsButton","useCallback","node","tagName","useButtonType","defaultType","contentProps","button","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","marginEnd","marginStart","Form","nameInputId","nanoid","numberInputId","onSubmit","preventDefault","contact","find","alert","addContactsThunk","reset","Input","placeholder","required","useEffect","fetchContactsThunk","HelmetProvider","Helmet"],"sourceRoot":""}